
















#ifndef _H5FDpublic_H
#define _H5FDpublic_H

#include "H5public.h"
#include "H5Fpublic.h"		

#define H5_HAVE_VFL 1 
#define H5FD_VFD_DEFAULT 0   


typedef enum H5F_mem_t	H5FD_mem_t;
















#define H5FD_MEM_FHEAP_HDR      H5FD_MEM_OHDR
#define H5FD_MEM_FHEAP_IBLOCK   H5FD_MEM_OHDR
#define H5FD_MEM_FHEAP_DBLOCK   H5FD_MEM_LHEAP
#define H5FD_MEM_FHEAP_HUGE_OBJ H5FD_MEM_DRAW










#define H5FD_MEM_FSPACE_HDR     H5FD_MEM_OHDR
#define H5FD_MEM_FSPACE_SINFO   H5FD_MEM_LHEAP











#define H5FD_MEM_SOHM_TABLE     H5FD_MEM_OHDR
#define H5FD_MEM_SOHM_INDEX     H5FD_MEM_BTREE
















#define H5FD_MEM_EARRAY_HDR     H5FD_MEM_OHDR
#define H5FD_MEM_EARRAY_IBLOCK  H5FD_MEM_OHDR
#define H5FD_MEM_EARRAY_SBLOCK  H5FD_MEM_BTREE
#define H5FD_MEM_EARRAY_DBLOCK  H5FD_MEM_LHEAP
#define H5FD_MEM_EARRAY_DBLK_PAGE  H5FD_MEM_LHEAP









#define H5FD_MEM_FARRAY_HDR     H5FD_MEM_OHDR
#define H5FD_MEM_FARRAY_DBLOCK  H5FD_MEM_LHEAP
#define H5FD_MEM_FARRAY_DBLK_PAGE  H5FD_MEM_LHEAP








#define H5FD_FLMAP_SINGLE {						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER						      \
}





#define H5FD_FLMAP_DICHOTOMY {						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_DRAW,						      \
    H5FD_MEM_DRAW,						      \
    H5FD_MEM_SUPER,						      \
    H5FD_MEM_SUPER						      \
}





#define H5FD_FLMAP_DEFAULT {						      \
    H5FD_MEM_DEFAULT,						      \
    H5FD_MEM_DEFAULT,						      \
    H5FD_MEM_DEFAULT,						      \
    H5FD_MEM_DEFAULT,						      \
    H5FD_MEM_DEFAULT,						      \
    H5FD_MEM_DEFAULT,						      \
    H5FD_MEM_DEFAULT						      \
}









#define H5FD_FEAT_AGGREGATE_METADATA    0x00000001












#define H5FD_FEAT_ACCUMULATE_METADATA_WRITE     0x00000002
#define H5FD_FEAT_ACCUMULATE_METADATA_READ      0x00000004
#define H5FD_FEAT_ACCUMULATE_METADATA   (H5FD_FEAT_ACCUMULATE_METADATA_WRITE|H5FD_FEAT_ACCUMULATE_METADATA_READ)







#define H5FD_FEAT_DATA_SIEVE            0x00000008





#define H5FD_FEAT_AGGREGATE_SMALLDATA   0x00000010






#define H5FD_FEAT_IGNORE_DRVRINFO       0x00000020






#define H5FD_FEAT_DIRTY_DRVRINFO_LOAD   0x00000040





#define H5FD_FEAT_POSIX_COMPAT_HANDLE   0x00000080    





#define H5FD_FEAT_HAS_MPI               0x00000100





#define H5FD_FEAT_ALLOCATE_EARLY        0x00000200





#define H5FD_FEAT_ALLOW_FILE_IMAGE      0x00000400





#define H5FD_FEAT_CAN_USE_FILE_IMAGE_CALLBACKS 0x00000800




#define H5FD_FEAT_SUPPORTS_SWMR_IO      0x00001000






#define H5FD_FEAT_USE_ALLOC_SIZE	0x00002000





#define H5FD_FEAT_PAGED_AGGR		0x00004000






#define H5FD_FEAT_DEFAULT_VFD_COMPATIBLE        0x00008000



typedef struct H5FD_t H5FD_t;


typedef struct H5FD_class_t {
    const char *name;
    haddr_t maxaddr;
    H5F_close_degree_t fc_degree;
    herr_t  (*terminate)(void);
    hsize_t (*sb_size)(H5FD_t *file);
    herr_t  (*sb_encode)(H5FD_t *file, char *name,
                         unsigned char *p);
    herr_t  (*sb_decode)(H5FD_t *f, const char *name, const unsigned char *p);
    size_t  fapl_size;
    void *  (*fapl_get)(H5FD_t *file);
    void *  (*fapl_copy)(const void *fapl);
    herr_t  (*fapl_free)(void *fapl);
    size_t  dxpl_size;
    void *  (*dxpl_copy)(const void *dxpl);
    herr_t  (*dxpl_free)(void *dxpl);
    H5FD_t *(*open)(const char *name, unsigned flags, hid_t fapl,
                    haddr_t maxaddr);
    herr_t  (*close)(H5FD_t *file);
    int     (*cmp)(const H5FD_t *f1, const H5FD_t *f2);
    herr_t  (*query)(const H5FD_t *f1, unsigned long *flags);
    herr_t  (*get_type_map)(const H5FD_t *file, H5FD_mem_t *type_map);
    haddr_t (*alloc)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size);
    herr_t  (*free)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                    haddr_t addr, hsize_t size);
    haddr_t (*get_eoa)(const H5FD_t *file, H5FD_mem_t type);
    herr_t  (*set_eoa)(H5FD_t *file, H5FD_mem_t type, haddr_t addr);
    haddr_t (*get_eof)(const H5FD_t *file, H5FD_mem_t type);
    herr_t  (*get_handle)(H5FD_t *file, hid_t fapl, void**file_handle);
    herr_t  (*read)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl,
                    haddr_t addr, size_t size, void *buffer);
    herr_t  (*write)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl,
                     haddr_t addr, size_t size, const void *buffer);
    herr_t  (*flush)(H5FD_t *file, hid_t dxpl_id, hbool_t closing);
    herr_t  (*truncate)(H5FD_t *file, hid_t dxpl_id, hbool_t closing);
    herr_t  (*lock)(H5FD_t *file, hbool_t rw);
    herr_t  (*unlock)(H5FD_t *file);
    H5FD_mem_t fl_map[H5FD_MEM_NTYPES];
} H5FD_class_t;








struct H5FD_t {
    hid_t               driver_id;      
    const H5FD_class_t *cls;            
    unsigned long       fileno;         
    unsigned            access_flags;   
    unsigned long       feature_flags;  
    haddr_t             maxaddr;        
    haddr_t             base_addr;      


    hsize_t             threshold;      
    hsize_t             alignment;      
    hbool_t             paged_aggr;     
};


typedef enum {
    H5FD_FILE_IMAGE_OP_NO_OP,
    H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET,     
    H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY,
    H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET,
    H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE,
    H5FD_FILE_IMAGE_OP_FILE_OPEN,
    H5FD_FILE_IMAGE_OP_FILE_RESIZE,
    H5FD_FILE_IMAGE_OP_FILE_CLOSE
} H5FD_file_image_op_t;




#ifdef __cplusplus
extern "C" {
#endif


H5_DLL hid_t H5FDregister(const H5FD_class_t *cls);
H5_DLL herr_t H5FDunregister(hid_t driver_id);
H5_DLL H5FD_t *H5FDopen(const char *name, unsigned flags, hid_t fapl_id,
                        haddr_t maxaddr);
H5_DLL herr_t H5FDclose(H5FD_t *file);
H5_DLL int H5FDcmp(const H5FD_t *f1, const H5FD_t *f2);
H5_DLL int H5FDquery(const H5FD_t *f, unsigned long *flags);
H5_DLL haddr_t H5FDalloc(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size);
H5_DLL herr_t H5FDfree(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                       haddr_t addr, hsize_t size);
H5_DLL haddr_t H5FDget_eoa(H5FD_t *file, H5FD_mem_t type);
H5_DLL herr_t H5FDset_eoa(H5FD_t *file, H5FD_mem_t type, haddr_t eoa);
H5_DLL haddr_t H5FDget_eof(H5FD_t *file, H5FD_mem_t type);
H5_DLL herr_t H5FDget_vfd_handle(H5FD_t *file, hid_t fapl, void**file_handle);
H5_DLL herr_t H5FDread(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                       haddr_t addr, size_t size, void *buf);
H5_DLL herr_t H5FDwrite(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id,
                        haddr_t addr, size_t size, const void *buf);
H5_DLL herr_t H5FDflush(H5FD_t *file, hid_t dxpl_id, hbool_t closing);
H5_DLL herr_t H5FDtruncate(H5FD_t *file, hid_t dxpl_id, hbool_t closing);
H5_DLL herr_t H5FDlock(H5FD_t *file, hbool_t rw);
H5_DLL herr_t H5FDunlock(H5FD_t *file);


H5_DLL herr_t H5FDdriver_query(hid_t driver_id, unsigned long *flags);

#ifdef __cplusplus
}
#endif
#endif
    
