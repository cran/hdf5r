
/* typedef enum H5_index_t { H5_INDEX_UNKNOWN = -1, H5_INDEX_NAME, H5_INDEX_CRT_ORDER, H5_INDEX_N } H5_index_t; */
hid_t create_DT_H5_index_t(void) {
  enum H5_index_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5_index_t), issigned(enum H5_index_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5_INDEX_UNKNOWN;
  H5Tenum_insert(dtype_id, "H5_INDEX_UNKNOWN", &myenum);
  myenum = H5_INDEX_NAME;
  H5Tenum_insert(dtype_id, "H5_INDEX_NAME", &myenum);
  myenum = H5_INDEX_CRT_ORDER;
  H5Tenum_insert(dtype_id, "H5_INDEX_CRT_ORDER", &myenum);
  myenum = H5_INDEX_N;
  H5Tenum_insert(dtype_id, "H5_INDEX_N", &myenum);
  return(dtype_id);
}

/* typedef enum { H5_ITER_UNKNOWN = -1, H5_ITER_INC, H5_ITER_DEC, H5_ITER_NATIVE, H5_ITER_N } H5_iter_order_t; */
hid_t create_DT_H5_iter_order_t(void) {
  H5_iter_order_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(H5_iter_order_t), issigned(H5_iter_order_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5_ITER_UNKNOWN;
  H5Tenum_insert(dtype_id, "H5_ITER_UNKNOWN", &myenum);
  myenum = H5_ITER_INC;
  H5Tenum_insert(dtype_id, "H5_ITER_INC", &myenum);
  myenum = H5_ITER_DEC;
  H5Tenum_insert(dtype_id, "H5_ITER_DEC", &myenum);
  myenum = H5_ITER_NATIVE;
  H5Tenum_insert(dtype_id, "H5_ITER_NATIVE", &myenum);
  myenum = H5_ITER_N;
  H5Tenum_insert(dtype_id, "H5_ITER_N", &myenum);
  return(dtype_id);
}

/* typedef enum H5C_cache_decr_mode{ H5C_decr__off, H5C_decr__threshold, H5C_decr__age_out, H5C_decr__age_out_with_threshold} H5C_cache_decr_mode; */
hid_t create_DT_H5C_cache_decr_mode(void) {
  enum H5C_cache_decr_mode myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5C_cache_decr_mode), issigned(enum H5C_cache_decr_mode));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5C_decr__off;
  H5Tenum_insert(dtype_id, "H5C_decr__off", &myenum);
  myenum = H5C_decr__threshold;
  H5Tenum_insert(dtype_id, "H5C_decr__threshold", &myenum);
  myenum = H5C_decr__age_out;
  H5Tenum_insert(dtype_id, "H5C_decr__age_out", &myenum);
  myenum = H5C_decr__age_out_with_threshold;
  H5Tenum_insert(dtype_id, "H5C_decr__age_out_with_threshold", &myenum);
  return(dtype_id);
}

/* typedef enum H5C_cache_flash_incr_mode{ H5C_flash_incr__off, H5C_flash_incr__add_space} H5C_cache_flash_incr_mode; */
hid_t create_DT_H5C_cache_flash_incr_mode(void) {
  enum H5C_cache_flash_incr_mode myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5C_cache_flash_incr_mode), issigned(enum H5C_cache_flash_incr_mode));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5C_flash_incr__off;
  H5Tenum_insert(dtype_id, "H5C_flash_incr__off", &myenum);
  myenum = H5C_flash_incr__add_space;
  H5Tenum_insert(dtype_id, "H5C_flash_incr__add_space", &myenum);
  return(dtype_id);
}

/* typedef enum H5C_cache_incr_mode{ H5C_incr__off, H5C_incr__threshold} H5C_cache_incr_mode; */
hid_t create_DT_H5C_cache_incr_mode(void) {
  enum H5C_cache_incr_mode myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5C_cache_incr_mode), issigned(enum H5C_cache_incr_mode));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5C_incr__off;
  H5Tenum_insert(dtype_id, "H5C_incr__off", &myenum);
  myenum = H5C_incr__threshold;
  H5Tenum_insert(dtype_id, "H5C_incr__threshold", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_alloc_time_t { H5D_ALLOC_TIME_ERROR = -1, H5D_ALLOC_TIME_DEFAULT = 0, H5D_ALLOC_TIME_EARLY = 1, H5D_ALLOC_TIME_LATE = 2, H5D_ALLOC_TIME_INCR = 3} H5D_alloc_time_t; */
hid_t create_DT_H5D_alloc_time_t(void) {
  enum H5D_alloc_time_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_alloc_time_t), issigned(enum H5D_alloc_time_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_ALLOC_TIME_ERROR;
  H5Tenum_insert(dtype_id, "H5D_ALLOC_TIME_ERROR", &myenum);
  myenum = H5D_ALLOC_TIME_DEFAULT;
  H5Tenum_insert(dtype_id, "H5D_ALLOC_TIME_DEFAULT", &myenum);
  myenum = H5D_ALLOC_TIME_EARLY;
  H5Tenum_insert(dtype_id, "H5D_ALLOC_TIME_EARLY", &myenum);
  myenum = H5D_ALLOC_TIME_LATE;
  H5Tenum_insert(dtype_id, "H5D_ALLOC_TIME_LATE", &myenum);
  myenum = H5D_ALLOC_TIME_INCR;
  H5Tenum_insert(dtype_id, "H5D_ALLOC_TIME_INCR", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_chunk_index_t { H5D_CHUNK_IDX_BTREE = 0, H5D_CHUNK_IDX_SINGLE = 1, H5D_CHUNK_IDX_NONE = 2, H5D_CHUNK_IDX_FARRAY = 3, H5D_CHUNK_IDX_EARRAY = 4, H5D_CHUNK_IDX_BT2 = 5, H5D_CHUNK_IDX_NTYPES } H5D_chunk_index_t; */
hid_t create_DT_H5D_chunk_index_t(void) {
  enum H5D_chunk_index_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_chunk_index_t), issigned(enum H5D_chunk_index_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_CHUNK_IDX_BTREE;
  H5Tenum_insert(dtype_id, "H5D_CHUNK_IDX_BTREE", &myenum);
  myenum = H5D_CHUNK_IDX_SINGLE;
  H5Tenum_insert(dtype_id, "H5D_CHUNK_IDX_SINGLE", &myenum);
  myenum = H5D_CHUNK_IDX_NONE;
  H5Tenum_insert(dtype_id, "H5D_CHUNK_IDX_NONE", &myenum);
  myenum = H5D_CHUNK_IDX_FARRAY;
  H5Tenum_insert(dtype_id, "H5D_CHUNK_IDX_FARRAY", &myenum);
  myenum = H5D_CHUNK_IDX_EARRAY;
  H5Tenum_insert(dtype_id, "H5D_CHUNK_IDX_EARRAY", &myenum);
  myenum = H5D_CHUNK_IDX_BT2;
  H5Tenum_insert(dtype_id, "H5D_CHUNK_IDX_BT2", &myenum);
  myenum = H5D_CHUNK_IDX_NTYPES;
  H5Tenum_insert(dtype_id, "H5D_CHUNK_IDX_NTYPES", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_fill_time_t { H5D_FILL_TIME_ERROR = -1, H5D_FILL_TIME_ALLOC = 0, H5D_FILL_TIME_NEVER = 1, H5D_FILL_TIME_IFSET = 2} H5D_fill_time_t; */
hid_t create_DT_H5D_fill_time_t(void) {
  enum H5D_fill_time_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_fill_time_t), issigned(enum H5D_fill_time_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_FILL_TIME_ERROR;
  H5Tenum_insert(dtype_id, "H5D_FILL_TIME_ERROR", &myenum);
  myenum = H5D_FILL_TIME_ALLOC;
  H5Tenum_insert(dtype_id, "H5D_FILL_TIME_ALLOC", &myenum);
  myenum = H5D_FILL_TIME_NEVER;
  H5Tenum_insert(dtype_id, "H5D_FILL_TIME_NEVER", &myenum);
  myenum = H5D_FILL_TIME_IFSET;
  H5Tenum_insert(dtype_id, "H5D_FILL_TIME_IFSET", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_fill_value_t { H5D_FILL_VALUE_ERROR =-1, H5D_FILL_VALUE_UNDEFINED =0, H5D_FILL_VALUE_DEFAULT =1, H5D_FILL_VALUE_USER_DEFINED =2} H5D_fill_value_t; */
hid_t create_DT_H5D_fill_value_t(void) {
  enum H5D_fill_value_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_fill_value_t), issigned(enum H5D_fill_value_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_FILL_VALUE_ERROR;
  H5Tenum_insert(dtype_id, "H5D_FILL_VALUE_ERROR", &myenum);
  myenum = H5D_FILL_VALUE_UNDEFINED;
  H5Tenum_insert(dtype_id, "H5D_FILL_VALUE_UNDEFINED", &myenum);
  myenum = H5D_FILL_VALUE_DEFAULT;
  H5Tenum_insert(dtype_id, "H5D_FILL_VALUE_DEFAULT", &myenum);
  myenum = H5D_FILL_VALUE_USER_DEFINED;
  H5Tenum_insert(dtype_id, "H5D_FILL_VALUE_USER_DEFINED", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_layout_t { H5D_LAYOUT_ERROR = -1, H5D_COMPACT = 0, H5D_CONTIGUOUS = 1, H5D_CHUNKED = 2, H5D_VIRTUAL = 3, H5D_NLAYOUTS = 4 } H5D_layout_t; */
hid_t create_DT_H5D_layout_t(void) {
  enum H5D_layout_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_layout_t), issigned(enum H5D_layout_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_LAYOUT_ERROR;
  H5Tenum_insert(dtype_id, "H5D_LAYOUT_ERROR", &myenum);
  myenum = H5D_COMPACT;
  H5Tenum_insert(dtype_id, "H5D_COMPACT", &myenum);
  myenum = H5D_CONTIGUOUS;
  H5Tenum_insert(dtype_id, "H5D_CONTIGUOUS", &myenum);
  myenum = H5D_CHUNKED;
  H5Tenum_insert(dtype_id, "H5D_CHUNKED", &myenum);
  myenum = H5D_VIRTUAL;
  H5Tenum_insert(dtype_id, "H5D_VIRTUAL", &myenum);
  myenum = H5D_NLAYOUTS;
  H5Tenum_insert(dtype_id, "H5D_NLAYOUTS", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_mpio_actual_chunk_opt_mode_t { H5D_MPIO_NO_CHUNK_OPTIMIZATION = 0, H5D_MPIO_LINK_CHUNK, H5D_MPIO_MULTI_CHUNK} H5D_mpio_actual_chunk_opt_mode_t; */
hid_t create_DT_H5D_mpio_actual_chunk_opt_mode_t(void) {
  enum H5D_mpio_actual_chunk_opt_mode_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_mpio_actual_chunk_opt_mode_t), issigned(enum H5D_mpio_actual_chunk_opt_mode_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_MPIO_NO_CHUNK_OPTIMIZATION;
  H5Tenum_insert(dtype_id, "H5D_MPIO_NO_CHUNK_OPTIMIZATION", &myenum);
  myenum = H5D_MPIO_LINK_CHUNK;
  H5Tenum_insert(dtype_id, "H5D_MPIO_LINK_CHUNK", &myenum);
  myenum = H5D_MPIO_MULTI_CHUNK;
  H5Tenum_insert(dtype_id, "H5D_MPIO_MULTI_CHUNK", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_mpio_actual_io_mode_t { H5D_MPIO_NO_COLLECTIVE = 0x0, H5D_MPIO_CHUNK_INDEPENDENT = 0x1, H5D_MPIO_CHUNK_COLLECTIVE = 0x2, H5D_MPIO_CHUNK_MIXED = 0x1 | 0x2, H5D_MPIO_CONTIGUOUS_COLLECTIVE = 0x4} H5D_mpio_actual_io_mode_t; */
hid_t create_DT_H5D_mpio_actual_io_mode_t(void) {
  enum H5D_mpio_actual_io_mode_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_mpio_actual_io_mode_t), issigned(enum H5D_mpio_actual_io_mode_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_MPIO_NO_COLLECTIVE;
  H5Tenum_insert(dtype_id, "H5D_MPIO_NO_COLLECTIVE", &myenum);
  myenum = H5D_MPIO_CHUNK_INDEPENDENT;
  H5Tenum_insert(dtype_id, "H5D_MPIO_CHUNK_INDEPENDENT", &myenum);
  myenum = H5D_MPIO_CHUNK_COLLECTIVE;
  H5Tenum_insert(dtype_id, "H5D_MPIO_CHUNK_COLLECTIVE", &myenum);
  myenum = H5D_MPIO_CHUNK_MIXED;
  H5Tenum_insert(dtype_id, "H5D_MPIO_CHUNK_MIXED", &myenum);
  myenum = H5D_MPIO_CONTIGUOUS_COLLECTIVE;
  H5Tenum_insert(dtype_id, "H5D_MPIO_CONTIGUOUS_COLLECTIVE", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_mpio_no_collective_cause_t { H5D_MPIO_COLLECTIVE = 0x00, H5D_MPIO_SET_INDEPENDENT = 0x01, H5D_MPIO_DATATYPE_CONVERSION = 0x02, H5D_MPIO_DATA_TRANSFORMS = 0x04, H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED = 0x08, H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES = 0x10, H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET = 0x20, H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED = 0x40, H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE = 0x80} H5D_mpio_no_collective_cause_t; */
hid_t create_DT_H5D_mpio_no_collective_cause_t(void) {
  enum H5D_mpio_no_collective_cause_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_mpio_no_collective_cause_t), issigned(enum H5D_mpio_no_collective_cause_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_MPIO_COLLECTIVE;
  H5Tenum_insert(dtype_id, "H5D_MPIO_COLLECTIVE", &myenum);
  myenum = H5D_MPIO_SET_INDEPENDENT;
  H5Tenum_insert(dtype_id, "H5D_MPIO_SET_INDEPENDENT", &myenum);
  myenum = H5D_MPIO_DATATYPE_CONVERSION;
  H5Tenum_insert(dtype_id, "H5D_MPIO_DATATYPE_CONVERSION", &myenum);
  myenum = H5D_MPIO_DATA_TRANSFORMS;
  H5Tenum_insert(dtype_id, "H5D_MPIO_DATA_TRANSFORMS", &myenum);
  myenum = H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED;
  H5Tenum_insert(dtype_id, "H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED", &myenum);
  myenum = H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES;
  H5Tenum_insert(dtype_id, "H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES", &myenum);
  myenum = H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET;
  H5Tenum_insert(dtype_id, "H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET", &myenum);
  myenum = H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED;
  H5Tenum_insert(dtype_id, "H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED", &myenum);
  myenum = H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE;
  H5Tenum_insert(dtype_id, "H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_space_status_t { H5D_SPACE_STATUS_ERROR = -1, H5D_SPACE_STATUS_NOT_ALLOCATED = 0, H5D_SPACE_STATUS_PART_ALLOCATED = 1, H5D_SPACE_STATUS_ALLOCATED = 2} H5D_space_status_t; */
hid_t create_DT_H5D_space_status_t(void) {
  enum H5D_space_status_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_space_status_t), issigned(enum H5D_space_status_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_SPACE_STATUS_ERROR;
  H5Tenum_insert(dtype_id, "H5D_SPACE_STATUS_ERROR", &myenum);
  myenum = H5D_SPACE_STATUS_NOT_ALLOCATED;
  H5Tenum_insert(dtype_id, "H5D_SPACE_STATUS_NOT_ALLOCATED", &myenum);
  myenum = H5D_SPACE_STATUS_PART_ALLOCATED;
  H5Tenum_insert(dtype_id, "H5D_SPACE_STATUS_PART_ALLOCATED", &myenum);
  myenum = H5D_SPACE_STATUS_ALLOCATED;
  H5Tenum_insert(dtype_id, "H5D_SPACE_STATUS_ALLOCATED", &myenum);
  return(dtype_id);
}

/* typedef enum H5D_vds_view_t { H5D_VDS_ERROR = -1, H5D_VDS_FIRST_MISSING = 0, H5D_VDS_LAST_AVAILABLE = 1} H5D_vds_view_t; */
hid_t create_DT_H5D_vds_view_t(void) {
  enum H5D_vds_view_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5D_vds_view_t), issigned(enum H5D_vds_view_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5D_VDS_ERROR;
  H5Tenum_insert(dtype_id, "H5D_VDS_ERROR", &myenum);
  myenum = H5D_VDS_FIRST_MISSING;
  H5Tenum_insert(dtype_id, "H5D_VDS_FIRST_MISSING", &myenum);
  myenum = H5D_VDS_LAST_AVAILABLE;
  H5Tenum_insert(dtype_id, "H5D_VDS_LAST_AVAILABLE", &myenum);
  return(dtype_id);
}

/* typedef enum H5E_direction_t { H5E_WALK_UPWARD = 0, H5E_WALK_DOWNWARD = 1 } H5E_direction_t; */
hid_t create_DT_H5E_direction_t(void) {
  enum H5E_direction_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5E_direction_t), issigned(enum H5E_direction_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5E_WALK_UPWARD;
  H5Tenum_insert(dtype_id, "H5E_WALK_UPWARD", &myenum);
  myenum = H5E_WALK_DOWNWARD;
  H5Tenum_insert(dtype_id, "H5E_WALK_DOWNWARD", &myenum);
  return(dtype_id);
}

/* typedef enum H5E_type_t { H5E_MAJOR, H5E_MINOR} H5E_type_t; */
hid_t create_DT_H5E_type_t(void) {
  enum H5E_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5E_type_t), issigned(enum H5E_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5E_MAJOR;
  H5Tenum_insert(dtype_id, "H5E_MAJOR", &myenum);
  myenum = H5E_MINOR;
  H5Tenum_insert(dtype_id, "H5E_MINOR", &myenum);
  return(dtype_id);
}

/* typedef enum H5F_close_degree_t { H5F_CLOSE_DEFAULT = 0, H5F_CLOSE_WEAK = 1, H5F_CLOSE_SEMI = 2, H5F_CLOSE_STRONG = 3} H5F_close_degree_t; */
hid_t create_DT_H5F_close_degree_t(void) {
  enum H5F_close_degree_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5F_close_degree_t), issigned(enum H5F_close_degree_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5F_CLOSE_DEFAULT;
  H5Tenum_insert(dtype_id, "H5F_CLOSE_DEFAULT", &myenum);
  myenum = H5F_CLOSE_WEAK;
  H5Tenum_insert(dtype_id, "H5F_CLOSE_WEAK", &myenum);
  myenum = H5F_CLOSE_SEMI;
  H5Tenum_insert(dtype_id, "H5F_CLOSE_SEMI", &myenum);
  myenum = H5F_CLOSE_STRONG;
  H5Tenum_insert(dtype_id, "H5F_CLOSE_STRONG", &myenum);
  return(dtype_id);
}

/* typedef enum H5F_file_space_type_t { H5F_FILE_SPACE_DEFAULT = 0, H5F_FILE_SPACE_ALL_PERSIST = 1, H5F_FILE_SPACE_ALL = 2, H5F_FILE_SPACE_AGGR_VFD = 3, H5F_FILE_SPACE_VFD = 4, H5F_FILE_SPACE_NTYPES } H5F_file_space_type_t; */
hid_t create_DT_H5F_file_space_type_t(void) {
  enum H5F_file_space_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5F_file_space_type_t), issigned(enum H5F_file_space_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5F_FILE_SPACE_DEFAULT;
  H5Tenum_insert(dtype_id, "H5F_FILE_SPACE_DEFAULT", &myenum);
  myenum = H5F_FILE_SPACE_ALL_PERSIST;
  H5Tenum_insert(dtype_id, "H5F_FILE_SPACE_ALL_PERSIST", &myenum);
  myenum = H5F_FILE_SPACE_ALL;
  H5Tenum_insert(dtype_id, "H5F_FILE_SPACE_ALL", &myenum);
  myenum = H5F_FILE_SPACE_AGGR_VFD;
  H5Tenum_insert(dtype_id, "H5F_FILE_SPACE_AGGR_VFD", &myenum);
  myenum = H5F_FILE_SPACE_VFD;
  H5Tenum_insert(dtype_id, "H5F_FILE_SPACE_VFD", &myenum);
  myenum = H5F_FILE_SPACE_NTYPES;
  H5Tenum_insert(dtype_id, "H5F_FILE_SPACE_NTYPES", &myenum);
  return(dtype_id);
}

/* typedef enum H5F_fspace_strategy_t { H5F_FSPACE_STRATEGY_FSM_AGGR = 0, H5F_FSPACE_STRATEGY_PAGE = 1, H5F_FSPACE_STRATEGY_AGGR = 2, H5F_FSPACE_STRATEGY_NONE = 3, H5F_FSPACE_STRATEGY_NTYPES } H5F_fspace_strategy_t; */
hid_t create_DT_H5F_fspace_strategy_t(void) {
  enum H5F_fspace_strategy_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5F_fspace_strategy_t), issigned(enum H5F_fspace_strategy_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5F_FSPACE_STRATEGY_FSM_AGGR;
  H5Tenum_insert(dtype_id, "H5F_FSPACE_STRATEGY_FSM_AGGR", &myenum);
  myenum = H5F_FSPACE_STRATEGY_PAGE;
  H5Tenum_insert(dtype_id, "H5F_FSPACE_STRATEGY_PAGE", &myenum);
  myenum = H5F_FSPACE_STRATEGY_AGGR;
  H5Tenum_insert(dtype_id, "H5F_FSPACE_STRATEGY_AGGR", &myenum);
  myenum = H5F_FSPACE_STRATEGY_NONE;
  H5Tenum_insert(dtype_id, "H5F_FSPACE_STRATEGY_NONE", &myenum);
  myenum = H5F_FSPACE_STRATEGY_NTYPES;
  H5Tenum_insert(dtype_id, "H5F_FSPACE_STRATEGY_NTYPES", &myenum);
  return(dtype_id);
}

/* typedef enum H5F_libver_t { H5F_LIBVER_ERROR = -1, H5F_LIBVER_EARLIEST = 0, H5F_LIBVER_V18 = 1, H5F_LIBVER_V110 = 2, H5F_LIBVER_NBOUNDS} H5F_libver_t; */
hid_t create_DT_H5F_libver_t(void) {
  enum H5F_libver_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5F_libver_t), issigned(enum H5F_libver_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5F_LIBVER_ERROR;
  H5Tenum_insert(dtype_id, "H5F_LIBVER_ERROR", &myenum);
  myenum = H5F_LIBVER_EARLIEST;
  H5Tenum_insert(dtype_id, "H5F_LIBVER_EARLIEST", &myenum);
  myenum = H5F_LIBVER_V18;
  H5Tenum_insert(dtype_id, "H5F_LIBVER_V18", &myenum);
  myenum = H5F_LIBVER_V110;
  H5Tenum_insert(dtype_id, "H5F_LIBVER_V110", &myenum);
  myenum = H5F_LIBVER_NBOUNDS;
  H5Tenum_insert(dtype_id, "H5F_LIBVER_NBOUNDS", &myenum);
  return(dtype_id);
}

/* typedef enum H5F_mem_t { H5FD_MEM_NOLIST = -1, H5FD_MEM_DEFAULT = 0, H5FD_MEM_SUPER = 1, H5FD_MEM_BTREE = 2, H5FD_MEM_DRAW = 3, H5FD_MEM_GHEAP = 4, H5FD_MEM_LHEAP = 5, H5FD_MEM_OHDR = 6, H5FD_MEM_NTYPES } H5F_mem_t; */
hid_t create_DT_H5F_mem_t(void) {
  enum H5F_mem_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5F_mem_t), issigned(enum H5F_mem_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5FD_MEM_NOLIST;
  H5Tenum_insert(dtype_id, "H5FD_MEM_NOLIST", &myenum);
  myenum = H5FD_MEM_DEFAULT;
  H5Tenum_insert(dtype_id, "H5FD_MEM_DEFAULT", &myenum);
  myenum = H5FD_MEM_SUPER;
  H5Tenum_insert(dtype_id, "H5FD_MEM_SUPER", &myenum);
  myenum = H5FD_MEM_BTREE;
  H5Tenum_insert(dtype_id, "H5FD_MEM_BTREE", &myenum);
  myenum = H5FD_MEM_DRAW;
  H5Tenum_insert(dtype_id, "H5FD_MEM_DRAW", &myenum);
  myenum = H5FD_MEM_GHEAP;
  H5Tenum_insert(dtype_id, "H5FD_MEM_GHEAP", &myenum);
  myenum = H5FD_MEM_LHEAP;
  H5Tenum_insert(dtype_id, "H5FD_MEM_LHEAP", &myenum);
  myenum = H5FD_MEM_OHDR;
  H5Tenum_insert(dtype_id, "H5FD_MEM_OHDR", &myenum);
  myenum = H5FD_MEM_NTYPES;
  H5Tenum_insert(dtype_id, "H5FD_MEM_NTYPES", &myenum);
  return(dtype_id);
}

/* typedef enum H5F_scope_t { H5F_SCOPE_LOCAL = 0, H5F_SCOPE_GLOBAL = 1 } H5F_scope_t; */
hid_t create_DT_H5F_scope_t(void) {
  enum H5F_scope_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5F_scope_t), issigned(enum H5F_scope_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5F_SCOPE_LOCAL;
  H5Tenum_insert(dtype_id, "H5F_SCOPE_LOCAL", &myenum);
  myenum = H5F_SCOPE_GLOBAL;
  H5Tenum_insert(dtype_id, "H5F_SCOPE_GLOBAL", &myenum);
  return(dtype_id);
}

/* typedef enum { H5FD_FILE_IMAGE_OP_NO_OP, H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET, H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY, H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET, H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE, H5FD_FILE_IMAGE_OP_FILE_OPEN, H5FD_FILE_IMAGE_OP_FILE_RESIZE, H5FD_FILE_IMAGE_OP_FILE_CLOSE} H5FD_file_image_op_t; */
hid_t create_DT_H5FD_file_image_op_t(void) {
  H5FD_file_image_op_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(H5FD_file_image_op_t), issigned(H5FD_file_image_op_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5FD_FILE_IMAGE_OP_NO_OP;
  H5Tenum_insert(dtype_id, "H5FD_FILE_IMAGE_OP_NO_OP", &myenum);
  myenum = H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET;
  H5Tenum_insert(dtype_id, "H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET", &myenum);
  myenum = H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY;
  H5Tenum_insert(dtype_id, "H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY", &myenum);
  myenum = H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET;
  H5Tenum_insert(dtype_id, "H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET", &myenum);
  myenum = H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE;
  H5Tenum_insert(dtype_id, "H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE", &myenum);
  myenum = H5FD_FILE_IMAGE_OP_FILE_OPEN;
  H5Tenum_insert(dtype_id, "H5FD_FILE_IMAGE_OP_FILE_OPEN", &myenum);
  myenum = H5FD_FILE_IMAGE_OP_FILE_RESIZE;
  H5Tenum_insert(dtype_id, "H5FD_FILE_IMAGE_OP_FILE_RESIZE", &myenum);
  myenum = H5FD_FILE_IMAGE_OP_FILE_CLOSE;
  H5Tenum_insert(dtype_id, "H5FD_FILE_IMAGE_OP_FILE_CLOSE", &myenum);
  return(dtype_id);
}

/* typedef enum H5G_obj_t { H5G_UNKNOWN = -1, H5G_GROUP, H5G_DATASET, H5G_TYPE, H5G_LINK, H5G_UDLINK, H5G_RESERVED_5, H5G_RESERVED_6, H5G_RESERVED_7 } H5G_obj_t; */
hid_t create_DT_H5G_obj_t(void) {
  enum H5G_obj_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5G_obj_t), issigned(enum H5G_obj_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5G_UNKNOWN;
  H5Tenum_insert(dtype_id, "H5G_UNKNOWN", &myenum);
  myenum = H5G_GROUP;
  H5Tenum_insert(dtype_id, "H5G_GROUP", &myenum);
  myenum = H5G_DATASET;
  H5Tenum_insert(dtype_id, "H5G_DATASET", &myenum);
  myenum = H5G_TYPE;
  H5Tenum_insert(dtype_id, "H5G_TYPE", &myenum);
  myenum = H5G_LINK;
  H5Tenum_insert(dtype_id, "H5G_LINK", &myenum);
  myenum = H5G_UDLINK;
  H5Tenum_insert(dtype_id, "H5G_UDLINK", &myenum);
  myenum = H5G_RESERVED_5;
  H5Tenum_insert(dtype_id, "H5G_RESERVED_5", &myenum);
  myenum = H5G_RESERVED_6;
  H5Tenum_insert(dtype_id, "H5G_RESERVED_6", &myenum);
  myenum = H5G_RESERVED_7;
  H5Tenum_insert(dtype_id, "H5G_RESERVED_7", &myenum);
  return(dtype_id);
}

/* typedef enum H5G_storage_type_t { H5G_STORAGE_TYPE_UNKNOWN = -1, H5G_STORAGE_TYPE_SYMBOL_TABLE, H5G_STORAGE_TYPE_COMPACT, H5G_STORAGE_TYPE_DENSE } H5G_storage_type_t; */
hid_t create_DT_H5G_storage_type_t(void) {
  enum H5G_storage_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5G_storage_type_t), issigned(enum H5G_storage_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5G_STORAGE_TYPE_UNKNOWN;
  H5Tenum_insert(dtype_id, "H5G_STORAGE_TYPE_UNKNOWN", &myenum);
  myenum = H5G_STORAGE_TYPE_SYMBOL_TABLE;
  H5Tenum_insert(dtype_id, "H5G_STORAGE_TYPE_SYMBOL_TABLE", &myenum);
  myenum = H5G_STORAGE_TYPE_COMPACT;
  H5Tenum_insert(dtype_id, "H5G_STORAGE_TYPE_COMPACT", &myenum);
  myenum = H5G_STORAGE_TYPE_DENSE;
  H5Tenum_insert(dtype_id, "H5G_STORAGE_TYPE_DENSE", &myenum);
  return(dtype_id);
}

/* typedef enum H5I_type_t { H5I_UNINIT = (-2), H5I_BADID = (-1), H5I_FILE = 1, H5I_GROUP, H5I_DATATYPE, H5I_DATASPACE, H5I_DATASET, H5I_ATTR, H5I_REFERENCE, H5I_VFL, H5I_GENPROP_CLS, H5I_GENPROP_LST, H5I_ERROR_CLASS, H5I_ERROR_MSG, H5I_ERROR_STACK, H5I_NTYPES } H5I_type_t; */
hid_t create_DT_H5I_type_t(void) {
  enum H5I_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5I_type_t), issigned(enum H5I_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5I_UNINIT;
  H5Tenum_insert(dtype_id, "H5I_UNINIT", &myenum);
  myenum = H5I_BADID;
  H5Tenum_insert(dtype_id, "H5I_BADID", &myenum);
  myenum = H5I_FILE;
  H5Tenum_insert(dtype_id, "H5I_FILE", &myenum);
  myenum = H5I_GROUP;
  H5Tenum_insert(dtype_id, "H5I_GROUP", &myenum);
  myenum = H5I_DATATYPE;
  H5Tenum_insert(dtype_id, "H5I_DATATYPE", &myenum);
  myenum = H5I_DATASPACE;
  H5Tenum_insert(dtype_id, "H5I_DATASPACE", &myenum);
  myenum = H5I_DATASET;
  H5Tenum_insert(dtype_id, "H5I_DATASET", &myenum);
  myenum = H5I_ATTR;
  H5Tenum_insert(dtype_id, "H5I_ATTR", &myenum);
  myenum = H5I_REFERENCE;
  H5Tenum_insert(dtype_id, "H5I_REFERENCE", &myenum);
  myenum = H5I_VFL;
  H5Tenum_insert(dtype_id, "H5I_VFL", &myenum);
  myenum = H5I_GENPROP_CLS;
  H5Tenum_insert(dtype_id, "H5I_GENPROP_CLS", &myenum);
  myenum = H5I_GENPROP_LST;
  H5Tenum_insert(dtype_id, "H5I_GENPROP_LST", &myenum);
  myenum = H5I_ERROR_CLASS;
  H5Tenum_insert(dtype_id, "H5I_ERROR_CLASS", &myenum);
  myenum = H5I_ERROR_MSG;
  H5Tenum_insert(dtype_id, "H5I_ERROR_MSG", &myenum);
  myenum = H5I_ERROR_STACK;
  H5Tenum_insert(dtype_id, "H5I_ERROR_STACK", &myenum);
  myenum = H5I_NTYPES;
  H5Tenum_insert(dtype_id, "H5I_NTYPES", &myenum);
  return(dtype_id);
}

/* typedef enum { H5L_TYPE_ERROR = (-1), H5L_TYPE_HARD = 0, H5L_TYPE_SOFT = 1, H5L_TYPE_EXTERNAL = 64, H5L_TYPE_MAX = 255 } H5L_type_t; */
hid_t create_DT_H5L_type_t(void) {
  H5L_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(H5L_type_t), issigned(H5L_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5L_TYPE_ERROR;
  H5Tenum_insert(dtype_id, "H5L_TYPE_ERROR", &myenum);
  myenum = H5L_TYPE_HARD;
  H5Tenum_insert(dtype_id, "H5L_TYPE_HARD", &myenum);
  myenum = H5L_TYPE_SOFT;
  H5Tenum_insert(dtype_id, "H5L_TYPE_SOFT", &myenum);
  myenum = H5L_TYPE_EXTERNAL;
  H5Tenum_insert(dtype_id, "H5L_TYPE_EXTERNAL", &myenum);
  myenum = H5L_TYPE_MAX;
  H5Tenum_insert(dtype_id, "H5L_TYPE_MAX", &myenum);
  return(dtype_id);
}

/* typedef enum H5LT_lang_t { H5LT_LANG_ERR = -1, H5LT_DDL = 0, H5LT_C = 1, H5LT_FORTRAN = 2, H5LT_NO_LANG = 3 } H5LT_lang_t; */
hid_t create_DT_H5LT_lang_t(void) {
  enum H5LT_lang_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5LT_lang_t), issigned(enum H5LT_lang_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5LT_LANG_ERR;
  H5Tenum_insert(dtype_id, "H5LT_LANG_ERR", &myenum);
  myenum = H5LT_DDL;
  H5Tenum_insert(dtype_id, "H5LT_DDL", &myenum);
  myenum = H5LT_C;
  H5Tenum_insert(dtype_id, "H5LT_C", &myenum);
  myenum = H5LT_FORTRAN;
  H5Tenum_insert(dtype_id, "H5LT_FORTRAN", &myenum);
  myenum = H5LT_NO_LANG;
  H5Tenum_insert(dtype_id, "H5LT_NO_LANG", &myenum);
  return(dtype_id);
}

/* typedef enum H5O_mcdt_search_ret_t { H5O_MCDT_SEARCH_ERROR = -1, H5O_MCDT_SEARCH_CONT, H5O_MCDT_SEARCH_STOP } H5O_mcdt_search_ret_t; */
hid_t create_DT_H5O_mcdt_search_ret_t(void) {
  enum H5O_mcdt_search_ret_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5O_mcdt_search_ret_t), issigned(enum H5O_mcdt_search_ret_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5O_MCDT_SEARCH_ERROR;
  H5Tenum_insert(dtype_id, "H5O_MCDT_SEARCH_ERROR", &myenum);
  myenum = H5O_MCDT_SEARCH_CONT;
  H5Tenum_insert(dtype_id, "H5O_MCDT_SEARCH_CONT", &myenum);
  myenum = H5O_MCDT_SEARCH_STOP;
  H5Tenum_insert(dtype_id, "H5O_MCDT_SEARCH_STOP", &myenum);
  return(dtype_id);
}

/* typedef enum H5O_type_t { H5O_TYPE_UNKNOWN = -1, H5O_TYPE_GROUP, H5O_TYPE_DATASET, H5O_TYPE_NAMED_DATATYPE, H5O_TYPE_NTYPES } H5O_type_t; */
hid_t create_DT_H5O_type_t(void) {
  enum H5O_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5O_type_t), issigned(enum H5O_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5O_TYPE_UNKNOWN;
  H5Tenum_insert(dtype_id, "H5O_TYPE_UNKNOWN", &myenum);
  myenum = H5O_TYPE_GROUP;
  H5Tenum_insert(dtype_id, "H5O_TYPE_GROUP", &myenum);
  myenum = H5O_TYPE_DATASET;
  H5Tenum_insert(dtype_id, "H5O_TYPE_DATASET", &myenum);
  myenum = H5O_TYPE_NAMED_DATATYPE;
  H5Tenum_insert(dtype_id, "H5O_TYPE_NAMED_DATATYPE", &myenum);
  myenum = H5O_TYPE_NTYPES;
  H5Tenum_insert(dtype_id, "H5O_TYPE_NTYPES", &myenum);
  return(dtype_id);
}

/* typedef enum H5PL_type_t { H5PL_TYPE_ERROR = -1, H5PL_TYPE_FILTER = 0, H5PL_TYPE_NONE = 1 } H5PL_type_t; */
hid_t create_DT_H5PL_type_t(void) {
  enum H5PL_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5PL_type_t), issigned(enum H5PL_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5PL_TYPE_ERROR;
  H5Tenum_insert(dtype_id, "H5PL_TYPE_ERROR", &myenum);
  myenum = H5PL_TYPE_FILTER;
  H5Tenum_insert(dtype_id, "H5PL_TYPE_FILTER", &myenum);
  myenum = H5PL_TYPE_NONE;
  H5Tenum_insert(dtype_id, "H5PL_TYPE_NONE", &myenum);
  return(dtype_id);
}

/* typedef enum H5R_type_t { H5R_BADTYPE = (-1), H5R_OBJECT, H5R_DATASET_REGION, H5R_MAXTYPE } H5R_type_t; */
hid_t create_DT_H5R_type_t(void) {
  enum H5R_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5R_type_t), issigned(enum H5R_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5R_BADTYPE;
  H5Tenum_insert(dtype_id, "H5R_BADTYPE", &myenum);
  myenum = H5R_OBJECT;
  H5Tenum_insert(dtype_id, "H5R_OBJECT", &myenum);
  myenum = H5R_DATASET_REGION;
  H5Tenum_insert(dtype_id, "H5R_DATASET_REGION", &myenum);
  myenum = H5R_MAXTYPE;
  H5Tenum_insert(dtype_id, "H5R_MAXTYPE", &myenum);
  return(dtype_id);
}

/* typedef enum H5S_class_t { H5S_NO_CLASS = -1, H5S_SCALAR = 0, H5S_SIMPLE = 1, H5S_NULL = 2 } H5S_class_t; */
hid_t create_DT_H5S_class_t(void) {
  enum H5S_class_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5S_class_t), issigned(enum H5S_class_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5S_NO_CLASS;
  H5Tenum_insert(dtype_id, "H5S_NO_CLASS", &myenum);
  myenum = H5S_SCALAR;
  H5Tenum_insert(dtype_id, "H5S_SCALAR", &myenum);
  myenum = H5S_SIMPLE;
  H5Tenum_insert(dtype_id, "H5S_SIMPLE", &myenum);
  myenum = H5S_NULL;
  H5Tenum_insert(dtype_id, "H5S_NULL", &myenum);
  return(dtype_id);
}

/* typedef enum { H5S_SEL_ERROR = -1, H5S_SEL_NONE = 0, H5S_SEL_POINTS = 1, H5S_SEL_HYPERSLABS = 2, H5S_SEL_ALL = 3, H5S_SEL_N }H5S_sel_type; */
hid_t create_DT_H5S_sel_type(void) {
  H5S_sel_type myenum;
  hid_t base_type = get_h5_equiv(sizeof(H5S_sel_type), issigned(H5S_sel_type));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5S_SEL_ERROR;
  H5Tenum_insert(dtype_id, "H5S_SEL_ERROR", &myenum);
  myenum = H5S_SEL_NONE;
  H5Tenum_insert(dtype_id, "H5S_SEL_NONE", &myenum);
  myenum = H5S_SEL_POINTS;
  H5Tenum_insert(dtype_id, "H5S_SEL_POINTS", &myenum);
  myenum = H5S_SEL_HYPERSLABS;
  H5Tenum_insert(dtype_id, "H5S_SEL_HYPERSLABS", &myenum);
  myenum = H5S_SEL_ALL;
  H5Tenum_insert(dtype_id, "H5S_SEL_ALL", &myenum);
  myenum = H5S_SEL_N;
  H5Tenum_insert(dtype_id, "H5S_SEL_N", &myenum);
  return(dtype_id);
}

/* typedef enum H5S_seloper_t { H5S_SELECT_NOOP = -1, H5S_SELECT_SET = 0, H5S_SELECT_OR, H5S_SELECT_AND, H5S_SELECT_XOR, H5S_SELECT_NOTB, H5S_SELECT_NOTA, H5S_SELECT_APPEND, H5S_SELECT_PREPEND, H5S_SELECT_INVALID } H5S_seloper_t; */
hid_t create_DT_H5S_seloper_t(void) {
  enum H5S_seloper_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5S_seloper_t), issigned(enum H5S_seloper_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5S_SELECT_NOOP;
  H5Tenum_insert(dtype_id, "H5S_SELECT_NOOP", &myenum);
  myenum = H5S_SELECT_SET;
  H5Tenum_insert(dtype_id, "H5S_SELECT_SET", &myenum);
  myenum = H5S_SELECT_OR;
  H5Tenum_insert(dtype_id, "H5S_SELECT_OR", &myenum);
  myenum = H5S_SELECT_AND;
  H5Tenum_insert(dtype_id, "H5S_SELECT_AND", &myenum);
  myenum = H5S_SELECT_XOR;
  H5Tenum_insert(dtype_id, "H5S_SELECT_XOR", &myenum);
  myenum = H5S_SELECT_NOTB;
  H5Tenum_insert(dtype_id, "H5S_SELECT_NOTB", &myenum);
  myenum = H5S_SELECT_NOTA;
  H5Tenum_insert(dtype_id, "H5S_SELECT_NOTA", &myenum);
  myenum = H5S_SELECT_APPEND;
  H5Tenum_insert(dtype_id, "H5S_SELECT_APPEND", &myenum);
  myenum = H5S_SELECT_PREPEND;
  H5Tenum_insert(dtype_id, "H5S_SELECT_PREPEND", &myenum);
  myenum = H5S_SELECT_INVALID;
  H5Tenum_insert(dtype_id, "H5S_SELECT_INVALID", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_bkg_t { H5T_BKG_NO = 0, H5T_BKG_TEMP = 1, H5T_BKG_YES = 2 } H5T_bkg_t; */
hid_t create_DT_H5T_bkg_t(void) {
  enum H5T_bkg_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_bkg_t), issigned(enum H5T_bkg_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_BKG_NO;
  H5Tenum_insert(dtype_id, "H5T_BKG_NO", &myenum);
  myenum = H5T_BKG_TEMP;
  H5Tenum_insert(dtype_id, "H5T_BKG_TEMP", &myenum);
  myenum = H5T_BKG_YES;
  H5Tenum_insert(dtype_id, "H5T_BKG_YES", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_class_t { H5T_NO_CLASS = -1, H5T_INTEGER = 0, H5T_FLOAT = 1, H5T_TIME = 2, H5T_STRING = 3, H5T_BITFIELD = 4, H5T_OPAQUE = 5, H5T_COMPOUND = 6, H5T_REFERENCE = 7, H5T_ENUM = 8, H5T_VLEN = 9, H5T_ARRAY = 10, H5T_NCLASSES } H5T_class_t; */
hid_t create_DT_H5T_class_t(void) {
  enum H5T_class_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_class_t), issigned(enum H5T_class_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_NO_CLASS;
  H5Tenum_insert(dtype_id, "H5T_NO_CLASS", &myenum);
  myenum = H5T_INTEGER;
  H5Tenum_insert(dtype_id, "H5T_INTEGER", &myenum);
  myenum = H5T_FLOAT;
  H5Tenum_insert(dtype_id, "H5T_FLOAT", &myenum);
  myenum = H5T_TIME;
  H5Tenum_insert(dtype_id, "H5T_TIME", &myenum);
  myenum = H5T_STRING;
  H5Tenum_insert(dtype_id, "H5T_STRING", &myenum);
  myenum = H5T_BITFIELD;
  H5Tenum_insert(dtype_id, "H5T_BITFIELD", &myenum);
  myenum = H5T_OPAQUE;
  H5Tenum_insert(dtype_id, "H5T_OPAQUE", &myenum);
  myenum = H5T_COMPOUND;
  H5Tenum_insert(dtype_id, "H5T_COMPOUND", &myenum);
  myenum = H5T_REFERENCE;
  H5Tenum_insert(dtype_id, "H5T_REFERENCE", &myenum);
  myenum = H5T_ENUM;
  H5Tenum_insert(dtype_id, "H5T_ENUM", &myenum);
  myenum = H5T_VLEN;
  H5Tenum_insert(dtype_id, "H5T_VLEN", &myenum);
  myenum = H5T_ARRAY;
  H5Tenum_insert(dtype_id, "H5T_ARRAY", &myenum);
  myenum = H5T_NCLASSES;
  H5Tenum_insert(dtype_id, "H5T_NCLASSES", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_cmd_t { H5T_CONV_INIT = 0, H5T_CONV_CONV = 1, H5T_CONV_FREE = 2 } H5T_cmd_t; */
hid_t create_DT_H5T_cmd_t(void) {
  enum H5T_cmd_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_cmd_t), issigned(enum H5T_cmd_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_CONV_INIT;
  H5Tenum_insert(dtype_id, "H5T_CONV_INIT", &myenum);
  myenum = H5T_CONV_CONV;
  H5Tenum_insert(dtype_id, "H5T_CONV_CONV", &myenum);
  myenum = H5T_CONV_FREE;
  H5Tenum_insert(dtype_id, "H5T_CONV_FREE", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_conv_except_t { H5T_CONV_EXCEPT_RANGE_HI = 0, H5T_CONV_EXCEPT_RANGE_LOW = 1, H5T_CONV_EXCEPT_PRECISION = 2, H5T_CONV_EXCEPT_TRUNCATE = 3, H5T_CONV_EXCEPT_PINF = 4, H5T_CONV_EXCEPT_NINF = 5, H5T_CONV_EXCEPT_NAN = 6 } H5T_conv_except_t; */
hid_t create_DT_H5T_conv_except_t(void) {
  enum H5T_conv_except_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_conv_except_t), issigned(enum H5T_conv_except_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_CONV_EXCEPT_RANGE_HI;
  H5Tenum_insert(dtype_id, "H5T_CONV_EXCEPT_RANGE_HI", &myenum);
  myenum = H5T_CONV_EXCEPT_RANGE_LOW;
  H5Tenum_insert(dtype_id, "H5T_CONV_EXCEPT_RANGE_LOW", &myenum);
  myenum = H5T_CONV_EXCEPT_PRECISION;
  H5Tenum_insert(dtype_id, "H5T_CONV_EXCEPT_PRECISION", &myenum);
  myenum = H5T_CONV_EXCEPT_TRUNCATE;
  H5Tenum_insert(dtype_id, "H5T_CONV_EXCEPT_TRUNCATE", &myenum);
  myenum = H5T_CONV_EXCEPT_PINF;
  H5Tenum_insert(dtype_id, "H5T_CONV_EXCEPT_PINF", &myenum);
  myenum = H5T_CONV_EXCEPT_NINF;
  H5Tenum_insert(dtype_id, "H5T_CONV_EXCEPT_NINF", &myenum);
  myenum = H5T_CONV_EXCEPT_NAN;
  H5Tenum_insert(dtype_id, "H5T_CONV_EXCEPT_NAN", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_conv_ret_t { H5T_CONV_ABORT = -1, H5T_CONV_UNHANDLED = 0, H5T_CONV_HANDLED = 1 } H5T_conv_ret_t; */
hid_t create_DT_H5T_conv_ret_t(void) {
  enum H5T_conv_ret_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_conv_ret_t), issigned(enum H5T_conv_ret_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_CONV_ABORT;
  H5Tenum_insert(dtype_id, "H5T_CONV_ABORT", &myenum);
  myenum = H5T_CONV_UNHANDLED;
  H5Tenum_insert(dtype_id, "H5T_CONV_UNHANDLED", &myenum);
  myenum = H5T_CONV_HANDLED;
  H5Tenum_insert(dtype_id, "H5T_CONV_HANDLED", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_cset_t { H5T_CSET_ERROR = -1, H5T_CSET_ASCII = 0, H5T_CSET_UTF8 = 1, H5T_CSET_RESERVED_2 = 2, H5T_CSET_RESERVED_3 = 3, H5T_CSET_RESERVED_4 = 4, H5T_CSET_RESERVED_5 = 5, H5T_CSET_RESERVED_6 = 6, H5T_CSET_RESERVED_7 = 7, H5T_CSET_RESERVED_8 = 8, H5T_CSET_RESERVED_9 = 9, H5T_CSET_RESERVED_10 = 10, H5T_CSET_RESERVED_11 = 11, H5T_CSET_RESERVED_12 = 12, H5T_CSET_RESERVED_13 = 13, H5T_CSET_RESERVED_14 = 14, H5T_CSET_RESERVED_15 = 15 } H5T_cset_t; */
hid_t create_DT_H5T_cset_t(void) {
  enum H5T_cset_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_cset_t), issigned(enum H5T_cset_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_CSET_ERROR;
  H5Tenum_insert(dtype_id, "H5T_CSET_ERROR", &myenum);
  myenum = H5T_CSET_ASCII;
  H5Tenum_insert(dtype_id, "H5T_CSET_ASCII", &myenum);
  myenum = H5T_CSET_UTF8;
  H5Tenum_insert(dtype_id, "H5T_CSET_UTF8", &myenum);
  myenum = H5T_CSET_RESERVED_2;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_2", &myenum);
  myenum = H5T_CSET_RESERVED_3;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_3", &myenum);
  myenum = H5T_CSET_RESERVED_4;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_4", &myenum);
  myenum = H5T_CSET_RESERVED_5;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_5", &myenum);
  myenum = H5T_CSET_RESERVED_6;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_6", &myenum);
  myenum = H5T_CSET_RESERVED_7;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_7", &myenum);
  myenum = H5T_CSET_RESERVED_8;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_8", &myenum);
  myenum = H5T_CSET_RESERVED_9;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_9", &myenum);
  myenum = H5T_CSET_RESERVED_10;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_10", &myenum);
  myenum = H5T_CSET_RESERVED_11;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_11", &myenum);
  myenum = H5T_CSET_RESERVED_12;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_12", &myenum);
  myenum = H5T_CSET_RESERVED_13;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_13", &myenum);
  myenum = H5T_CSET_RESERVED_14;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_14", &myenum);
  myenum = H5T_CSET_RESERVED_15;
  H5Tenum_insert(dtype_id, "H5T_CSET_RESERVED_15", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_direction_t { H5T_DIR_DEFAULT = 0, H5T_DIR_ASCEND = 1, H5T_DIR_DESCEND = 2 } H5T_direction_t; */
hid_t create_DT_H5T_direction_t(void) {
  enum H5T_direction_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_direction_t), issigned(enum H5T_direction_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_DIR_DEFAULT;
  H5Tenum_insert(dtype_id, "H5T_DIR_DEFAULT", &myenum);
  myenum = H5T_DIR_ASCEND;
  H5Tenum_insert(dtype_id, "H5T_DIR_ASCEND", &myenum);
  myenum = H5T_DIR_DESCEND;
  H5Tenum_insert(dtype_id, "H5T_DIR_DESCEND", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_norm_t { H5T_NORM_ERROR = -1, H5T_NORM_IMPLIED = 0, H5T_NORM_MSBSET = 1, H5T_NORM_NONE = 2 } H5T_norm_t; */
hid_t create_DT_H5T_norm_t(void) {
  enum H5T_norm_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_norm_t), issigned(enum H5T_norm_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_NORM_ERROR;
  H5Tenum_insert(dtype_id, "H5T_NORM_ERROR", &myenum);
  myenum = H5T_NORM_IMPLIED;
  H5Tenum_insert(dtype_id, "H5T_NORM_IMPLIED", &myenum);
  myenum = H5T_NORM_MSBSET;
  H5Tenum_insert(dtype_id, "H5T_NORM_MSBSET", &myenum);
  myenum = H5T_NORM_NONE;
  H5Tenum_insert(dtype_id, "H5T_NORM_NONE", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_order_t { H5T_ORDER_ERROR = -1, H5T_ORDER_LE = 0, H5T_ORDER_BE = 1, H5T_ORDER_VAX = 2, H5T_ORDER_MIXED = 3, H5T_ORDER_NONE = 4 } H5T_order_t; */
hid_t create_DT_H5T_order_t(void) {
  enum H5T_order_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_order_t), issigned(enum H5T_order_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_ORDER_ERROR;
  H5Tenum_insert(dtype_id, "H5T_ORDER_ERROR", &myenum);
  myenum = H5T_ORDER_LE;
  H5Tenum_insert(dtype_id, "H5T_ORDER_LE", &myenum);
  myenum = H5T_ORDER_BE;
  H5Tenum_insert(dtype_id, "H5T_ORDER_BE", &myenum);
  myenum = H5T_ORDER_VAX;
  H5Tenum_insert(dtype_id, "H5T_ORDER_VAX", &myenum);
  myenum = H5T_ORDER_MIXED;
  H5Tenum_insert(dtype_id, "H5T_ORDER_MIXED", &myenum);
  myenum = H5T_ORDER_NONE;
  H5Tenum_insert(dtype_id, "H5T_ORDER_NONE", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_pad_t { H5T_PAD_ERROR = -1, H5T_PAD_ZERO = 0, H5T_PAD_ONE = 1, H5T_PAD_BACKGROUND = 2, H5T_NPAD = 3 } H5T_pad_t; */
hid_t create_DT_H5T_pad_t(void) {
  enum H5T_pad_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_pad_t), issigned(enum H5T_pad_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_PAD_ERROR;
  H5Tenum_insert(dtype_id, "H5T_PAD_ERROR", &myenum);
  myenum = H5T_PAD_ZERO;
  H5Tenum_insert(dtype_id, "H5T_PAD_ZERO", &myenum);
  myenum = H5T_PAD_ONE;
  H5Tenum_insert(dtype_id, "H5T_PAD_ONE", &myenum);
  myenum = H5T_PAD_BACKGROUND;
  H5Tenum_insert(dtype_id, "H5T_PAD_BACKGROUND", &myenum);
  myenum = H5T_NPAD;
  H5Tenum_insert(dtype_id, "H5T_NPAD", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_pers_t { H5T_PERS_DONTCARE = -1, H5T_PERS_HARD = 0, H5T_PERS_SOFT = 1 } H5T_pers_t; */
hid_t create_DT_H5T_pers_t(void) {
  enum H5T_pers_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_pers_t), issigned(enum H5T_pers_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_PERS_DONTCARE;
  H5Tenum_insert(dtype_id, "H5T_PERS_DONTCARE", &myenum);
  myenum = H5T_PERS_HARD;
  H5Tenum_insert(dtype_id, "H5T_PERS_HARD", &myenum);
  myenum = H5T_PERS_SOFT;
  H5Tenum_insert(dtype_id, "H5T_PERS_SOFT", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_sign_t { H5T_SGN_ERROR = -1, H5T_SGN_NONE = 0, H5T_SGN_2 = 1, H5T_NSGN = 2 } H5T_sign_t; */
hid_t create_DT_H5T_sign_t(void) {
  enum H5T_sign_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_sign_t), issigned(enum H5T_sign_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_SGN_ERROR;
  H5Tenum_insert(dtype_id, "H5T_SGN_ERROR", &myenum);
  myenum = H5T_SGN_NONE;
  H5Tenum_insert(dtype_id, "H5T_SGN_NONE", &myenum);
  myenum = H5T_SGN_2;
  H5Tenum_insert(dtype_id, "H5T_SGN_2", &myenum);
  myenum = H5T_NSGN;
  H5Tenum_insert(dtype_id, "H5T_NSGN", &myenum);
  return(dtype_id);
}

/* typedef enum H5T_str_t { H5T_STR_ERROR = -1, H5T_STR_NULLTERM = 0, H5T_STR_NULLPAD = 1, H5T_STR_SPACEPAD = 2, H5T_STR_RESERVED_3 = 3, H5T_STR_RESERVED_4 = 4, H5T_STR_RESERVED_5 = 5, H5T_STR_RESERVED_6 = 6, H5T_STR_RESERVED_7 = 7, H5T_STR_RESERVED_8 = 8, H5T_STR_RESERVED_9 = 9, H5T_STR_RESERVED_10 = 10, H5T_STR_RESERVED_11 = 11, H5T_STR_RESERVED_12 = 12, H5T_STR_RESERVED_13 = 13, H5T_STR_RESERVED_14 = 14, H5T_STR_RESERVED_15 = 15 } H5T_str_t; */
hid_t create_DT_H5T_str_t(void) {
  enum H5T_str_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5T_str_t), issigned(enum H5T_str_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5T_STR_ERROR;
  H5Tenum_insert(dtype_id, "H5T_STR_ERROR", &myenum);
  myenum = H5T_STR_NULLTERM;
  H5Tenum_insert(dtype_id, "H5T_STR_NULLTERM", &myenum);
  myenum = H5T_STR_NULLPAD;
  H5Tenum_insert(dtype_id, "H5T_STR_NULLPAD", &myenum);
  myenum = H5T_STR_SPACEPAD;
  H5Tenum_insert(dtype_id, "H5T_STR_SPACEPAD", &myenum);
  myenum = H5T_STR_RESERVED_3;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_3", &myenum);
  myenum = H5T_STR_RESERVED_4;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_4", &myenum);
  myenum = H5T_STR_RESERVED_5;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_5", &myenum);
  myenum = H5T_STR_RESERVED_6;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_6", &myenum);
  myenum = H5T_STR_RESERVED_7;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_7", &myenum);
  myenum = H5T_STR_RESERVED_8;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_8", &myenum);
  myenum = H5T_STR_RESERVED_9;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_9", &myenum);
  myenum = H5T_STR_RESERVED_10;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_10", &myenum);
  myenum = H5T_STR_RESERVED_11;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_11", &myenum);
  myenum = H5T_STR_RESERVED_12;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_12", &myenum);
  myenum = H5T_STR_RESERVED_13;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_13", &myenum);
  myenum = H5T_STR_RESERVED_14;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_14", &myenum);
  myenum = H5T_STR_RESERVED_15;
  H5Tenum_insert(dtype_id, "H5T_STR_RESERVED_15", &myenum);
  return(dtype_id);
}

/* typedef enum H5Z_cb_return_t { H5Z_CB_ERROR = -1, H5Z_CB_FAIL = 0, H5Z_CB_CONT = 1, H5Z_CB_NO = 2} H5Z_cb_return_t; */
hid_t create_DT_H5Z_cb_return_t(void) {
  enum H5Z_cb_return_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5Z_cb_return_t), issigned(enum H5Z_cb_return_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5Z_CB_ERROR;
  H5Tenum_insert(dtype_id, "H5Z_CB_ERROR", &myenum);
  myenum = H5Z_CB_FAIL;
  H5Tenum_insert(dtype_id, "H5Z_CB_FAIL", &myenum);
  myenum = H5Z_CB_CONT;
  H5Tenum_insert(dtype_id, "H5Z_CB_CONT", &myenum);
  myenum = H5Z_CB_NO;
  H5Tenum_insert(dtype_id, "H5Z_CB_NO", &myenum);
  return(dtype_id);
}

/* typedef enum H5Z_EDC_t { H5Z_ERROR_EDC = -1, H5Z_DISABLE_EDC = 0, H5Z_ENABLE_EDC = 1, H5Z_NO_EDC = 2 } H5Z_EDC_t; */
hid_t create_DT_H5Z_EDC_t(void) {
  enum H5Z_EDC_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5Z_EDC_t), issigned(enum H5Z_EDC_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5Z_ERROR_EDC;
  H5Tenum_insert(dtype_id, "H5Z_ERROR_EDC", &myenum);
  myenum = H5Z_DISABLE_EDC;
  H5Tenum_insert(dtype_id, "H5Z_DISABLE_EDC", &myenum);
  myenum = H5Z_ENABLE_EDC;
  H5Tenum_insert(dtype_id, "H5Z_ENABLE_EDC", &myenum);
  myenum = H5Z_NO_EDC;
  H5Tenum_insert(dtype_id, "H5Z_NO_EDC", &myenum);
  return(dtype_id);
}

/* typedef enum H5Z_SO_scale_type_t { H5Z_SO_FLOAT_DSCALE = 0, H5Z_SO_FLOAT_ESCALE = 1, H5Z_SO_INT = 2} H5Z_SO_scale_type_t; */
hid_t create_DT_H5Z_SO_scale_type_t(void) {
  enum H5Z_SO_scale_type_t myenum;
  hid_t base_type = get_h5_equiv(sizeof(enum H5Z_SO_scale_type_t), issigned(enum H5Z_SO_scale_type_t));
  hid_t dtype_id = H5Tenum_create(base_type);
  myenum = H5Z_SO_FLOAT_DSCALE;
  H5Tenum_insert(dtype_id, "H5Z_SO_FLOAT_DSCALE", &myenum);
  myenum = H5Z_SO_FLOAT_ESCALE;
  H5Tenum_insert(dtype_id, "H5Z_SO_FLOAT_ESCALE", &myenum);
  myenum = H5Z_SO_INT;
  H5Tenum_insert(dtype_id, "H5Z_SO_INT", &myenum);
  return(dtype_id);
}
