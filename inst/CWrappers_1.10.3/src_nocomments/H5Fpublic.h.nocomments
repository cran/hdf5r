















#ifndef _H5Fpublic_H
#define _H5Fpublic_H


#include "H5public.h"
#include "H5ACpublic.h"
#include "H5Ipublic.h"


#undef H5CHECK
#ifndef _H5private_H
#define H5CHECK          H5check(),
#else   
#define H5CHECK
#endif  


#undef H5OPEN
#ifndef _H5private_H
#define H5OPEN        H5open(),
#else   
#define H5OPEN
#endif  










#define H5F_ACC_RDONLY	(H5CHECK H5OPEN 0x0000u)	
#define H5F_ACC_RDWR	(H5CHECK H5OPEN 0x0001u)	
#define H5F_ACC_TRUNC	(H5CHECK H5OPEN 0x0002u)	
#define H5F_ACC_EXCL	(H5CHECK H5OPEN 0x0004u)	

#define H5F_ACC_CREAT	(H5CHECK H5OPEN 0x0010u)	
#define H5F_ACC_SWMR_WRITE	(H5CHECK 0x0020u) 








#define H5F_ACC_SWMR_READ	(H5CHECK 0x0040u) 










#define H5F_ACC_DEFAULT (H5CHECK H5OPEN 0xffffu)	


#define H5F_OBJ_FILE	(0x0001u)       
#define H5F_OBJ_DATASET	(0x0002u)       
#define H5F_OBJ_GROUP	(0x0004u)       
#define H5F_OBJ_DATATYPE (0x0008u)      
#define H5F_OBJ_ATTR    (0x0010u)       
#define H5F_OBJ_ALL 	(H5F_OBJ_FILE|H5F_OBJ_DATASET|H5F_OBJ_GROUP|H5F_OBJ_DATATYPE|H5F_OBJ_ATTR)
#define H5F_OBJ_LOCAL   (0x0020u)       


#define H5F_FAMILY_DEFAULT (hsize_t)0

#ifdef H5_HAVE_PARALLEL






#define H5F_MPIO_DEBUG_KEY "H5F_mpio_debug_key"
#endif 


typedef enum H5F_scope_t {
    H5F_SCOPE_LOCAL	= 0,	
    H5F_SCOPE_GLOBAL	= 1 	
} H5F_scope_t;


#define H5F_UNLIMITED	((hsize_t)(-1L))









typedef enum H5F_close_degree_t {
    H5F_CLOSE_DEFAULT   = 0,
    H5F_CLOSE_WEAK      = 1,
    H5F_CLOSE_SEMI      = 2,
    H5F_CLOSE_STRONG    = 3
} H5F_close_degree_t;


typedef struct H5F_info2_t {
    H5F_info2_super_t super;
    H5F_info2_free_t free;
    H5F_info2_sohm_t sohm;
} H5F_info2_t;









typedef enum H5F_mem_t {
    H5FD_MEM_NOLIST     = -1,   


    H5FD_MEM_DEFAULT    = 0,    




    H5FD_MEM_SUPER      = 1,    
    H5FD_MEM_BTREE      = 2,    
    H5FD_MEM_DRAW       = 3,    
    H5FD_MEM_GHEAP      = 4,    
    H5FD_MEM_LHEAP      = 5,    
    H5FD_MEM_OHDR       = 6,    

    H5FD_MEM_NTYPES             
} H5F_mem_t;


typedef struct H5F_sect_info_t {
    haddr_t             addr;   
    hsize_t             size;   
} H5F_sect_info_t;


typedef enum H5F_libver_t {
    H5F_LIBVER_ERROR = -1,
    H5F_LIBVER_EARLIEST = 0,    
    H5F_LIBVER_V18 = 1,         
    H5F_LIBVER_V110 = 2,        
    H5F_LIBVER_NBOUNDS
} H5F_libver_t;

#define H5F_LIBVER_LATEST   H5F_LIBVER_V110


typedef enum H5F_fspace_strategy_t {
    H5F_FSPACE_STRATEGY_FSM_AGGR = 0,   

    H5F_FSPACE_STRATEGY_PAGE = 1,   
    H5F_FSPACE_STRATEGY_AGGR = 2,   
    H5F_FSPACE_STRATEGY_NONE = 3,   
    H5F_FSPACE_STRATEGY_NTYPES      
} H5F_fspace_strategy_t;



typedef enum H5F_file_space_type_t {
    H5F_FILE_SPACE_DEFAULT = 0,     
    H5F_FILE_SPACE_ALL_PERSIST = 1, 
    H5F_FILE_SPACE_ALL = 2,	    

    H5F_FILE_SPACE_AGGR_VFD = 3,    
    H5F_FILE_SPACE_VFD = 4,	    
    H5F_FILE_SPACE_NTYPES	    
} H5F_file_space_type_t;



#define H5F_NUM_METADATA_READ_RETRY_TYPES	21
typedef struct H5F_retry_info_t {
    unsigned nbins;
    uint32_t *retries[H5F_NUM_METADATA_READ_RETRY_TYPES];
} H5F_retry_info_t;


typedef herr_t (*H5F_flush_cb_t)(hid_t object_id, void *udata);


#ifdef __cplusplus
extern "C" {
#endif


H5_DLL htri_t H5Fis_hdf5(const char *filename);
H5_DLL hid_t  H5Fcreate(const char *filename, unsigned flags,
		  	  hid_t create_plist, hid_t access_plist);
H5_DLL hid_t  H5Fopen(const char *filename, unsigned flags,
		        hid_t access_plist);
H5_DLL hid_t  H5Freopen(hid_t file_id);
H5_DLL herr_t H5Fflush(hid_t object_id, H5F_scope_t scope);
H5_DLL herr_t H5Fclose(hid_t file_id);
H5_DLL hid_t  H5Fget_create_plist(hid_t file_id);
H5_DLL hid_t  H5Fget_access_plist(hid_t file_id);
H5_DLL herr_t H5Fget_intent(hid_t file_id, unsigned * intent);
H5_DLL ssize_t H5Fget_obj_count(hid_t file_id, unsigned types);
H5_DLL ssize_t H5Fget_obj_ids(hid_t file_id, unsigned types, size_t max_objs, hid_t *obj_id_list);
H5_DLL herr_t H5Fget_vfd_handle(hid_t file_id, hid_t fapl, void **file_handle);
H5_DLL herr_t H5Fmount(hid_t loc, const char *name, hid_t child, hid_t plist);
H5_DLL herr_t H5Funmount(hid_t loc, const char *name);
H5_DLL hssize_t H5Fget_freespace(hid_t file_id);
H5_DLL herr_t H5Fget_filesize(hid_t file_id, hsize_t *size);
H5_DLL herr_t H5Fget_eoa(hid_t file_id, haddr_t *eoa);
H5_DLL herr_t H5Fincrement_filesize(hid_t file_id, hsize_t increment);
H5_DLL ssize_t H5Fget_file_image(hid_t file_id, void * buf_ptr, size_t buf_len);
H5_DLL herr_t H5Fget_mdc_config(hid_t file_id,
				H5AC_cache_config_t * config_ptr);
H5_DLL herr_t H5Fset_mdc_config(hid_t file_id,
				H5AC_cache_config_t * config_ptr);
H5_DLL herr_t H5Fget_mdc_hit_rate(hid_t file_id, double * hit_rate_ptr);
H5_DLL herr_t H5Fget_mdc_size(hid_t file_id,
                              size_t * max_size_ptr,
                              size_t * min_clean_size_ptr,
                              size_t * cur_size_ptr,
                              int * cur_num_entries_ptr);
H5_DLL herr_t H5Freset_mdc_hit_rate_stats(hid_t file_id);
H5_DLL ssize_t H5Fget_name(hid_t obj_id, char *name, size_t size);
H5_DLL herr_t H5Fget_info2(hid_t obj_id, H5F_info2_t *finfo);
H5_DLL herr_t H5Fget_metadata_read_retry_info(hid_t file_id, H5F_retry_info_t *info);
H5_DLL herr_t H5Fstart_swmr_write(hid_t file_id);
H5_DLL ssize_t H5Fget_free_sections(hid_t file_id, H5F_mem_t type,
    size_t nsects, H5F_sect_info_t *sect_info);
H5_DLL herr_t H5Fclear_elink_file_cache(hid_t file_id);
H5_DLL herr_t H5Fset_libver_bounds(hid_t file_id, H5F_libver_t low, H5F_libver_t high);
H5_DLL herr_t H5Fstart_mdc_logging(hid_t file_id);
H5_DLL herr_t H5Fstop_mdc_logging(hid_t file_id);
H5_DLL herr_t H5Fget_mdc_logging_status(hid_t file_id,
                                         hbool_t *is_enabled,
                                         hbool_t *is_currently_logging);
H5_DLL herr_t H5Fformat_convert(hid_t fid);
H5_DLL herr_t H5Freset_page_buffering_stats(hid_t file_id);
H5_DLL herr_t H5Fget_page_buffering_stats(hid_t file_id, unsigned accesses[2],
    unsigned hits[2], unsigned misses[2], unsigned evictions[2], unsigned bypasses[2]);
H5_DLL herr_t H5Fget_mdc_image_info(hid_t file_id, haddr_t *image_addr, hsize_t *image_size);

#ifdef H5_HAVE_PARALLEL
H5_DLL herr_t H5Fset_mpi_atomicity(hid_t file_id, hbool_t flag);
H5_DLL herr_t H5Fget_mpi_atomicity(hid_t file_id, hbool_t *flag);
#endif 





#ifndef H5_NO_DEPRECATED_SYMBOLS


#define H5F_ACC_DEBUG	(H5CHECK H5OPEN 0x0000u)	




typedef struct H5F_info1_t {
    hsize_t		super_ext_size;	
    H5F_info1_helper_t sohm;
} H5F_info1_t;



H5_DLL herr_t H5Fget_info1(hid_t obj_id, H5F_info1_t *finfo);
H5_DLL herr_t H5Fset_latest_format(hid_t file_id, hbool_t latest_format);

#endif 

#ifdef __cplusplus
}
#endif
#endif 
    
